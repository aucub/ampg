import { makeApi, Zodios, type ZodiosOptions } from "../../deps.ts";
import { z } from "../../deps.ts";

const workers_ai_post_run_cf_baai_bge_base_en_v1_5_Body = z
  .object({ text: z.union([z.string(), z.array(z.string())]) })
  .passthrough();
const workers_ai_post_run_cf_bytedance_stable_diffusion_xl_lightning_Body = z
  .object({
    guidance: z.number().optional().default(7.5),
    image: z.array(z.number()).optional(),
    mask: z.array(z.number()).optional(),
    num_steps: z.number().int().lte(20).optional().default(20),
    prompt: z.string().min(1),
    strength: z.number().optional().default(1),
  })
  .passthrough();
const workers_ai_post_run_cf_facebook_bart_large_cnn_Body = z
  .object({
    input_text: z.string().min(1),
    max_length: z.number().int().optional().default(1024),
  })
  .passthrough();
const workers_ai_post_run_cf_meta_m2m100_1_2b_Body = z
  .object({
    source_lang: z.string().optional().default("en"),
    target_lang: z.string(),
    text: z.string().min(1),
  })
  .passthrough();
const workers_ai_post_run_hf_sentence_transformers_all_minilm_l6_v2_Body = z
  .object({ sentences: z.array(z.string()), source: z.string().min(1) })
  .passthrough();
const workers_ai_post_run_model_Body = z.union([
  z.object({ text: z.string().min(1) }).passthrough(),
  z
    .object({
      guidance: z.number().optional().default(7.5),
      image: z.array(z.number()).optional(),
      mask: z.array(z.number()).optional(),
      num_steps: z.number().int().lte(20).optional().default(20),
      prompt: z.string().min(1),
      strength: z.number().optional().default(1),
    })
    .passthrough(),
  z
    .object({ sentences: z.array(z.string()), source: z.string().min(1) })
    .passthrough(),
  z.object({ text: z.union([z.string(), z.array(z.string())]) }).passthrough(),
  z.union([
    z.instanceof(File),
    z
      .object({ audio: z.array(z.number()) })
      .partial()
      .passthrough(),
  ]),
  z.union([
    z.instanceof(File),
    z
      .object({ image: z.array(z.number()) })
      .partial()
      .passthrough(),
  ]),
  z.union([
    z.instanceof(File),
    z
      .object({ image: z.array(z.number()) })
      .partial()
      .passthrough(),
  ]),
  z.union([
    z
      .object({
        lora: z.string().optional(),
        max_tokens: z.number().int().optional().default(256),
        prompt: z.string().min(1).max(6144),
        raw: z.boolean().optional(),
        stream: z.boolean().optional(),
      })
      .passthrough(),
    z
      .object({
        max_tokens: z.number().int().optional().default(256),
        messages: z.array(
          z
            .object({ content: z.string().max(6144), role: z.string() })
            .passthrough()
        ),
        stream: z.boolean().optional(),
      })
      .passthrough(),
  ]),
  z
    .object({
      source_lang: z.string().optional().default("en"),
      target_lang: z.string(),
      text: z.string().min(1),
    })
    .passthrough(),
  z
    .object({
      input_text: z.string().min(1),
      max_length: z.number().int().optional().default(1024),
    })
    .passthrough(),
  z.union([
    z.instanceof(File),
    z
      .object({
        image: z.array(z.number()),
        max_tokens: z.number().int().default(512),
        prompt: z.string(),
      })
      .partial()
      .passthrough(),
  ]),
]);

export const schemas = {
  workers_ai_post_run_cf_baai_bge_base_en_v1_5_Body,
  workers_ai_post_run_cf_bytedance_stable_diffusion_xl_lightning_Body,
  workers_ai_post_run_cf_facebook_bart_large_cnn_Body,
  workers_ai_post_run_cf_meta_m2m100_1_2b_Body,
  workers_ai_post_run_hf_sentence_transformers_all_minilm_l6_v2_Body,
  workers_ai_post_run_model_Body,
};

const endpoints = makeApi([
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/:model_name",
    alias: "workers-ai-post-run-model",
    description: `This endpoint provides users with the capability to run specific AI models on-demand.

By submitting the required input data, users can receive real-time predictions or results generated by the chosen AI
model. The endpoint supports various AI model types, ensuring flexibility and adaptability for diverse use cases.

Model specific inputs available in [Cloudflare Docs](https://developers.cloudflare.com/workers-ai/models/).`,
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: workers_ai_post_run_model_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
      {
        name: "model_name",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.array(
            z
              .object({ label: z.string(), score: z.number() })
              .partial()
              .passthrough()
          ),
          z.instanceof(File),
          z.array(z.number()),
          z
            .object({
              data: z.array(z.array(z.number())),
              shape: z.array(z.number()),
            })
            .partial()
            .passthrough(),
          z
            .object({
              text: z.string(),
              vtt: z.string().optional(),
              word_count: z.number().optional(),
              words: z
                .array(
                  z
                    .object({
                      end: z.number(),
                      start: z.number(),
                      word: z.string(),
                    })
                    .partial()
                    .passthrough()
                )
                .optional(),
            })
            .passthrough(),
          z.array(
            z
              .object({ label: z.string(), score: z.number() })
              .partial()
              .passthrough()
          ),
          z.array(
            z
              .object({
                box: z
                  .object({
                    xmax: z.number(),
                    xmin: z.number(),
                    ymax: z.number(),
                    ymin: z.number(),
                  })
                  .partial()
                  .passthrough(),
                label: z.string(),
                score: z.number(),
              })
              .partial()
              .passthrough()
          ),
          z.union([
            z.object({ response: z.string() }).partial().passthrough(),
            z.instanceof(File),
          ]),
          z.object({ translated_text: z.string() }).partial().passthrough(),
          z.object({ summary: z.string() }).partial().passthrough(),
          z.object({ description: z.string() }).partial().passthrough(),
        ]),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad Request`,
        schema: z
          .object({
            errors: z.array(z.object({ message: z.string() }).passthrough()),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/baai/bge-base-en-v1.5",
    alias: "workers-ai-post-run-cf-baai-bge-base-en-v1-5",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: workers_ai_post_run_cf_baai_bge_base_en_v1_5_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z
          .object({
            data: z.array(z.array(z.number())),
            shape: z.array(z.number()),
          })
          .partial()
          .passthrough(),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/baai/bge-large-en-v1.5",
    alias: "workers-ai-post-run-cf-baai-bge-large-en-v1-5",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: workers_ai_post_run_cf_baai_bge_base_en_v1_5_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z
          .object({
            data: z.array(z.array(z.number())),
            shape: z.array(z.number()),
          })
          .partial()
          .passthrough(),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/baai/bge-small-en-v1.5",
    alias: "workers-ai-post-run-cf-baai-bge-small-en-v1-5",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: workers_ai_post_run_cf_baai_bge_base_en_v1_5_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z
          .object({
            data: z.array(z.array(z.number())),
            shape: z.array(z.number()),
          })
          .partial()
          .passthrough(),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/bytedance/stable-diffusion-xl-lightning",
    alias: "workers-ai-post-run-cf-bytedance-stable-diffusion-xl-lightning",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          workers_ai_post_run_cf_bytedance_stable_diffusion_xl_lightning_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/deepseek-ai/deepseek-math-7b-instruct",
    alias: "workers-ai-post-run-cf-deepseek-ai-deepseek-math-7b-instruct",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/defog/sqlcoder-7b-2",
    alias: "workers-ai-post-run-cf-defog-sqlcoder-7b-2",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/facebook/bart-large-cnn",
    alias: "workers-ai-post-run-cf-facebook-bart-large-cnn",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: workers_ai_post_run_cf_facebook_bart_large_cnn_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.object({ summary: z.string() }).partial().passthrough(),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/facebook/detr-resnet-50",
    alias: "workers-ai-post-run-cf-facebook-detr-resnet-50",
    requestFormat: "binary",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.instanceof(File),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.array(
          z
            .object({
              box: z
                .object({
                  xmax: z.number(),
                  xmin: z.number(),
                  ymax: z.number(),
                  ymin: z.number(),
                })
                .partial()
                .passthrough(),
              label: z.string(),
              score: z.number(),
            })
            .partial()
            .passthrough()
        ),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/google/gemma-2b-it-lora",
    alias: "workers-ai-post-run-cf-google-gemma-2b-it-lora",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/google/gemma-7b-it-lora",
    alias: "workers-ai-post-run-cf-google-gemma-7b-it-lora",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/huggingface/distilbert-sst-2-int8",
    alias: "workers-ai-post-run-cf-huggingface-distilbert-sst-2-int8",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ text: z.string().min(1) }).passthrough(),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.array(
          z
            .object({ label: z.string(), score: z.number() })
            .partial()
            .passthrough()
        ),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/inml/inml-roberta-dga",
    alias: "workers-ai-post-run-cf-inml-inml-roberta-dga",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ text: z.string().min(1) }).passthrough(),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.array(
          z
            .object({ label: z.string(), score: z.number() })
            .partial()
            .passthrough()
        ),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/jpmorganchase/roberta-spam",
    alias: "workers-ai-post-run-cf-jpmorganchase-roberta-spam",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.object({ text: z.string().min(1) }).passthrough(),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.array(
          z
            .object({ label: z.string(), score: z.number() })
            .partial()
            .passthrough()
        ),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/lykon/dreamshaper-8-lcm",
    alias: "workers-ai-post-run-cf-lykon-dreamshaper-8-lcm",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          workers_ai_post_run_cf_bytedance_stable_diffusion_xl_lightning_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/meta/llama-2-7b-chat-fp16",
    alias: "workers-ai-post-run-cf-meta-llama-2-7b-chat-fp16",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/meta/llama-2-7b-chat-int8",
    alias: "workers-ai-post-run-cf-meta-llama-2-7b-chat-int8",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/meta/m2m100-1.2b",
    alias: "workers-ai-post-run-cf-meta-m2m100-1-2b",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: workers_ai_post_run_cf_meta_m2m100_1_2b_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z
          .object({ translated_text: z.string() })
          .partial()
          .passthrough(),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/microsoft/phi-2",
    alias: "workers-ai-post-run-cf-microsoft-phi-2",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/microsoft/resnet-50",
    alias: "workers-ai-post-run-cf-microsoft-resnet-50",
    requestFormat: "binary",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.instanceof(File),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.array(
          z
            .object({ label: z.string(), score: z.number() })
            .partial()
            .passthrough()
        ),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/mistral/mistral-7b-instruct-v0.1",
    alias: "workers-ai-post-run-cf-mistral-mistral-7b-instruct-v0-1",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/mistral/mistral-7b-instruct-v0.1-vllm",
    alias: "workers-ai-post-run-cf-mistral-mistral-7b-instruct-v0-1-vllm",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/mistral/mistral-7b-instruct-v0.2-lora",
    alias: "workers-ai-post-run-cf-mistral-mistral-7b-instruct-v0-2-lora",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/openai/whisper",
    alias: "workers-ai-post-run-cf-openai-whisper",
    requestFormat: "binary",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.instanceof(File),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z
          .object({
            text: z.string(),
            vtt: z.string().optional(),
            word_count: z.number().optional(),
            words: z
              .array(
                z
                  .object({
                    end: z.number(),
                    start: z.number(),
                    word: z.string(),
                  })
                  .partial()
                  .passthrough()
              )
              .optional(),
          })
          .passthrough(),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/openai/whisper-sherpa",
    alias: "workers-ai-post-run-cf-openai-whisper-sherpa",
    requestFormat: "binary",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.instanceof(File),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z
          .object({
            text: z.string(),
            vtt: z.string().optional(),
            word_count: z.number().optional(),
            words: z
              .array(
                z
                  .object({
                    end: z.number(),
                    start: z.number(),
                    word: z.string(),
                  })
                  .partial()
                  .passthrough()
              )
              .optional(),
          })
          .passthrough(),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/openai/whisper-tiny-en",
    alias: "workers-ai-post-run-cf-openai-whisper-tiny-en",
    requestFormat: "binary",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.instanceof(File),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z
          .object({
            text: z.string(),
            vtt: z.string().optional(),
            word_count: z.number().optional(),
            words: z
              .array(
                z
                  .object({
                    end: z.number(),
                    start: z.number(),
                    word: z.string(),
                  })
                  .partial()
                  .passthrough()
              )
              .optional(),
          })
          .passthrough(),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/openchat/openchat-3.5-0106",
    alias: "workers-ai-post-run-cf-openchat-openchat-3-5-0106",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/qwen/qwen1.5-0.5b-chat",
    alias: "workers-ai-post-run-cf-qwen-qwen1-5-0-5b-chat",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/qwen/qwen1.5-1.8b-chat",
    alias: "workers-ai-post-run-cf-qwen-qwen1-5-1-8b-chat",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/qwen/qwen1.5-14b-chat-awq",
    alias: "workers-ai-post-run-cf-qwen-qwen1-5-14b-chat-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/qwen/qwen1.5-7b-chat-awq",
    alias: "workers-ai-post-run-cf-qwen-qwen1-5-7b-chat-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/runwayml/stable-diffusion-v1-5-img2img",
    alias: "workers-ai-post-run-cf-runwayml-stable-diffusion-v1-5-img2img",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          workers_ai_post_run_cf_bytedance_stable_diffusion_xl_lightning_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/runwayml/stable-diffusion-v1-5-inpainting",
    alias: "workers-ai-post-run-cf-runwayml-stable-diffusion-v1-5-inpainting",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          workers_ai_post_run_cf_bytedance_stable_diffusion_xl_lightning_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/stabilityai/stable-diffusion-xl-base-1.0",
    alias: "workers-ai-post-run-cf-stabilityai-stable-diffusion-xl-base-1-0",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          workers_ai_post_run_cf_bytedance_stable_diffusion_xl_lightning_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z.void(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/thebloke/discolm-german-7b-v1-awq",
    alias: "workers-ai-post-run-cf-thebloke-discolm-german-7b-v1-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/tiiuae/falcon-7b-instruct",
    alias: "workers-ai-post-run-cf-tiiuae-falcon-7b-instruct",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@cf/tinyllama/tinyllama-1.1b-chat-v1.0",
    alias: "workers-ai-post-run-cf-tinyllama-tinyllama-1-1b-chat-v1-0",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/google/gemma-7b-it",
    alias: "workers-ai-post-run-hf-google-gemma-7b-it",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/mistral/mistral-7b-instruct-v0.2",
    alias: "workers-ai-post-run-hf-mistral-mistral-7b-instruct-v0-2",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/nexusflow/starling-lm-7b-beta",
    alias: "workers-ai-post-run-hf-nexusflow-starling-lm-7b-beta",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/nousresearch/hermes-2-pro-mistral-7b",
    alias: "workers-ai-post-run-hf-nousresearch-hermes-2-pro-mistral-7b",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/sentence-transformers/all-minilm-l6-v2",
    alias: "workers-ai-post-run-hf-sentence-transformers-all-minilm-l6-v2",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema:
          workers_ai_post_run_hf_sentence_transformers_all_minilm_l6_v2_Body,
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.array(z.number()),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/thebloke/codellama-7b-instruct-awq",
    alias: "workers-ai-post-run-hf-thebloke-codellama-7b-instruct-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/thebloke/deepseek-coder-6.7b-base-awq",
    alias: "workers-ai-post-run-hf-thebloke-deepseek-coder-6-7b-base-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/thebloke/deepseek-coder-6.7b-instruct-awq",
    alias: "workers-ai-post-run-hf-thebloke-deepseek-coder-6-7b-instruct-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/thebloke/llama-2-13b-chat-awq",
    alias: "workers-ai-post-run-hf-thebloke-llama-2-13b-chat-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/thebloke/llamaguard-7b-awq",
    alias: "workers-ai-post-run-hf-thebloke-llamaguard-7b-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/thebloke/mistral-7b-instruct-v0.1-awq",
    alias: "workers-ai-post-run-hf-thebloke-mistral-7b-instruct-v0-1-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/thebloke/neural-chat-7b-v3-1-awq",
    alias: "workers-ai-post-run-hf-thebloke-neural-chat-7b-v3-1-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/thebloke/openchat_3.5-awq",
    alias: "workers-ai-post-run-hf-thebloke-openchat_3-5-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/thebloke/openhermes-2.5-mistral-7b-awq",
    alias: "workers-ai-post-run-hf-thebloke-openhermes-2-5-mistral-7b-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
  {
    method: "post",
    path: "/accounts/:account_id/ai/run/@hf/thebloke/zephyr-7b-beta-awq",
    alias: "workers-ai-post-run-hf-thebloke-zephyr-7b-beta-awq",
    requestFormat: "json",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: z.union([
          z
            .object({
              lora: z.string().optional(),
              max_tokens: z.number().int().optional().default(256),
              prompt: z.string().min(1).max(6144),
              raw: z.boolean().optional(),
              stream: z.boolean().optional(),
            })
            .passthrough(),
          z
            .object({
              max_tokens: z.number().int().optional().default(256),
              messages: z.array(
                z
                  .object({ content: z.string().max(6144), role: z.string() })
                  .passthrough()
              ),
              stream: z.boolean().optional(),
            })
            .passthrough(),
        ]),
      },
      {
        name: "account_id",
        type: "Path",
        schema: z.string(),
      },
    ],
    response: z
      .object({
        result: z.union([
          z.object({ response: z.string() }).partial().passthrough(),
          z.instanceof(File),
        ]),
        success: z.boolean().default("true"),
      })
      .partial()
      .passthrough(),
    errors: [
      {
        status: 400,
        description: `Bad request`,
        schema: z
          .object({
            errors: z.array(
              z.object({ code: z.string(), message: z.string() }).passthrough()
            ),
            result: z.object({}).partial().passthrough(),
            success: z.boolean(),
          })
          .passthrough(),
      },
    ],
  },
]);

export const api = new Zodios(endpoints);

export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
  return new Zodios(baseUrl, endpoints, options);
}
